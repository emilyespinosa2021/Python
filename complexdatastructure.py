# -*- coding: utf-8 -*-
"""ComplexDataStructure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xNfnG8m7K2vSSZ_s9gPraHWtb1Md0xTu

## **List questions**

Question 1: Find the Missing Number
You are given a list of n-1 integers, and these integers are in the range of 1 to n. There are no duplicates in the list. One of the integers is missing. Write a function to find the missing number.

Questions 1: Merge Overlapping Intervals
Given a collection of intervals, merge any overlapping intervals.
"""

def find_missing(lst):
lst = [1, 2, 4, 6, 3, 7, 8]
newlst = []
for num in lst:
  for number in lst:
    print(str(num)+""+str(number))
    newlst.append(num + number)
missing_number = find_missing(lst)
print(missing_number)
def merge_intervals(intervals):
intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
intervals.sort(key = lambda, x:x[0])
index = 0
for i in range(1, len(intervals)):
  if(intervals[index][1]>= intervals[i][0]):
    intervals[index][1] = max(intervals[index][1], intervals[i][1])
    else:
      index = index+1
      intervals[index] = indervals[1]
merged = merge_intervals(intervals)
print(merged)

"""## **Tuple Questions**

Ques 1: Count Elements

Write a function that counts the number of elements in a tuple that are greater than a specified value.
"""

def count_greater(tup, value):
  # Your code here
  tup_count = tup.count()
  value_count = value.count()
  return tup_count> value_count

"""## **Set Questions**

Question 1: Maximal Set by Sum

Write a function to find the set from a list of sets that has the maximum sum of its elements.
"""

def max_set_by_sum(sets):
  # Your code here
  maxset = 0
  for x in sets
  maxset = max(sum(x), maxset)

  return maxset

"""##**Stack Questions**

Ques 1: Write a function to sort a stack.
"""

def sort_stack(stack):
  # Your code here
stack = [34, 3, 31, 98, 92, 23]
x = stack.pop()
sort_stack(stack)
temp = []
while stack and stack[-1] > x:
  temp.append(stack.pop())
  stack.append(x)
  while temp:
    stack.append(temp.pop())
    sort_stack(stack)
print(sort_stack(stack))