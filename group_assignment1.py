# -*- coding: utf-8 -*-
"""Group_Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kKSSxJ41zSPGfvnAY4fzPlwjKQmz6v2T

**Ques 1:**
You are given the list below, make column 0(the words) the key for a dictionary with the values as the rest of the list.

```
list_pos = [
    ['drawer', 141, 2, 3],
    ['hedge', 213, 1, 6],
    ['pantry', 328, 1, 7]
]

list_pos

# You output should be:

{'drawer': [141, 2, 3], 'hedge': [213, 1, 6], 'pantry': [328, 1, 7]}

```

Requirement: Do both traditional loops and list comprehensions.
"""

#postion of a word in a dictionary
list_pos = [
    ['drawer', 141, 2, 3],
    ['hedge', 213, 1, 6],
    ['pantry', 328, 1, 7]
]

list_pos

# Solution
new_list = [(key, value), for key, value in list_pos.items()]
print(new_list)

"""**Ques 2:** You are given the dictionary below, combine the keys(the words) and the values inside the dictionary and create a list.

You output should be:



```
dictionary_pos = {
    'drawer': [141, 2, 3],
    'hedge': [213, 1, 6],
    'pantry': [328, 1, 7]
}

dictionary_pos

# Your output should:

[['drawer', 141, 2, 3], ['hedge', 213, 1, 6], ['pantry', 328, 1, 7]]
```

Requirement: Do both traditional loops and list comprehensions.
"""

#Your turn:
#postion of a word in a dictionary
dictionary_pos = {
    'drawer': [141, 2, 3],
    'hedge': [213, 1, 6],
    'pantry': [328, 1, 7]
}

dictionary_pos

# Solution
result = list(map(list, dictionary_pos.items()))
print(result)

"""**Ques 3:** Use list comprehension to rewrite the code, it can be done in one line (and you do not even need an if statement)

```
result = []
myList = list(range(0, 13))
for i in range(6, len(myList)):
    if i%2 == 0:
        result.append(i)

result
```


"""

#Your Code:
myList = list(range(0, 13))
lc = [for i in range(6,len(myList))]

"""**Ques 4a:** Use the following code to perform the tasks given below:



```
set_a = {1, 2, 3, "a", "b", "c"}
set_b = {2, 3, 4, "c", "d"}
set_c = {2, 3, 'd', "t", "a"}
```


"""

# The following code is supposed to return the different elements in both sets of union_ab and set_a but not both of them.
set_b.difference(set_c)

# Elements that occur just in set c and not in set a
set_c.difference(set_a)

"""**Ques 4b:** This peice of code will work the same as which of the following options:


```
difference_A = []
for a in set_c:
  if(not(a in set_a)):
    difference_A.append(a)

print(difference_A)
```


"""

#Rewrite the code:

#A) difference = union_ab | set_a
union_ab = set_a.union(set_b)

set_a.difference(union_ab)

union_ab.difference(set_a)

"""**Ques 5:** A procedural function called GC_content(data).
Find the GC percentage for each of the elements in dna_list.
data is the list, dna_list.
"""

dna_list = ['GAAGTC', 'CGATATGC', 'GTCA', 'CGGACAGTAG']

#def GC_content(data):
    #Your Code:
GC_content = ((dna_list.count("C") + dna_list.count("G"))/len(dna_list))*100
GC_content(dna_list)